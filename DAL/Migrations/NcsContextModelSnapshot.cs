// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(NCSContext))]
    partial class NCSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DAL.Modules.Adresses.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Adresse1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("adresse");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codePostal");

                    b.Property<int?>("IdCompte")
                        .HasColumnType("int")
                        .HasColumnName("idCompte");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("longitude");

                    b.Property<string>("MailContact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("mailContact");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nom");

                    b.Property<string>("NomContact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nomContact");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("pays");

                    b.Property<string>("TelContact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telContact");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ville");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdCompte" }, "idCompte");

                    b.ToTable("adresse", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Adressetransports.Adressetransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("adresse");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codePostal");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("longitude");

                    b.Property<string>("MailContact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("mailContact");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nom");

                    b.Property<string>("NomContact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nomContact");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("pays");

                    b.Property<string>("TelContact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telContact");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("ville");

                    b.HasKey("Id");

                    b.ToTable("adressetransport", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Comptes.Compte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdresseFacturation")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("adresseFacturation");

                    b.Property<string>("CodePostalFacturation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codePostalFacturation");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EstValider")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("estValider")
                        .HasDefaultValueSql("'0'")
                        .IsFixedLength();

                    b.Property<int>("IdRoleCompte")
                        .HasColumnType("int")
                        .HasColumnName("idRoleCompte");

                    b.Property<int>("IdTypeEntreprise")
                        .HasColumnType("int")
                        .HasColumnName("idTypeEntreprise");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("mail");

                    b.Property<string>("MailFacturation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("mailFacturation");

                    b.Property<string>("Mdp")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("mdp");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nom");

                    b.Property<string>("NomEntreprise")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("nomEntreprise");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("prenom");

                    b.Property<int?>("ReductionPrix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reductionPrix")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("refreshToken");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tel");

                    b.Property<string>("TelFacturation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telFacturation");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("VilleFacturation")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("villeFacturation");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "IdRoleCompte" }, "idRoleCompte");

                    b.HasIndex(new[] { "IdTypeEntreprise" }, "idTypeEntreprise");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Marques.Marque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nom");

                    b.HasKey("Id");

                    b.ToTable("marque", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Rolecomptes.Rolecompte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nom");

                    b.HasKey("Id");

                    b.ToTable("rolecompte", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "Administrateur"
                        },
                        new
                        {
                            Id = 2,
                            Nom = "Client"
                        });
                });

            modelBuilder.Entity("DAL.Modules.Servicesupplementaires.Servicesupplementaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nom");

                    b.Property<decimal?>("Prix")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("prix");

                    b.HasKey("Id");

                    b.ToTable("servicesupplementaire", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Servicesupplementairetransports.Servicesupplementairetransport", b =>
                {
                    b.Property<int>("IdTransport")
                        .HasColumnType("int")
                        .HasColumnName("idTransport");

                    b.Property<int>("IdSupplement")
                        .HasColumnType("int")
                        .HasColumnName("idSupplement");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nom");

                    b.Property<decimal?>("Prix")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("prix");

                    b.HasKey("IdTransport", "IdSupplement")
                        .HasName("PRIMARY");

                    b.ToTable("servicesupplementairetransport", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Statuttransports.Statuttransport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CouleurHex")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("char(7)")
                        .HasColumnName("couleurHex")
                        .IsFixedLength();

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nom");

                    b.HasKey("Id");

                    b.ToTable("statuttransport", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CouleurHex = "#323E40",
                            Nom = "En attente de validation"
                        },
                        new
                        {
                            Id = 2,
                            CouleurHex = "#F2A922",
                            Nom = "Planifié"
                        },
                        new
                        {
                            Id = 3,
                            CouleurHex = "#D98014",
                            Nom = "En cours"
                        },
                        new
                        {
                            Id = 4,
                            CouleurHex = "#367334",
                            Nom = "Terminé"
                        },
                        new
                        {
                            Id = 5,
                            CouleurHex = "#A62929",
                            Nom = "Annulé"
                        },
                        new
                        {
                            Id = 6,
                            CouleurHex = "#BF926B",
                            Nom = "Expiré"
                        });
                });

            modelBuilder.Entity("DAL.Modules.Tarifs.Tarif", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IntervalKmMax")
                        .HasColumnType("int")
                        .HasColumnName("intervalKmMax");

                    b.Property<int>("IntervalKmMin")
                        .HasColumnType("int")
                        .HasColumnName("intervalKmMin");

                    b.Property<decimal?>("PrixAllerRetour")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("prixAllerRetour");

                    b.Property<decimal?>("PrixAllerSimple")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("prixAllerSimple");

                    b.HasKey("Id");

                    b.ToTable("tarif", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateHeureEnvoie")
                        .HasColumnType("datetime")
                        .HasColumnName("dateHeureEnvoie");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("mail");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("message");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nom");

                    b.Property<string>("NomEntreprise")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("nomEntreprise");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("prenom");

                    b.Property<string>("Sujet")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("sujet");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telephone");

                    b.HasKey("Id");

                    b.ToTable("ticket", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Transports.Transport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("BonCommande")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("bonCommande");

                    b.Property<string>("Commentaire")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("commentaire");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("date")
                        .HasColumnName("dateDebut");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("date")
                        .HasColumnName("dateFin");

                    b.Property<decimal>("DistanceKm")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("distanceKm");

                    b.Property<int>("IdAdresseDebut")
                        .HasColumnType("int")
                        .HasColumnName("idAdresseDebut");

                    b.Property<int>("IdAdresseFin")
                        .HasColumnType("int")
                        .HasColumnName("idAdresseFin");

                    b.Property<int>("IdCompte")
                        .HasColumnType("int")
                        .HasColumnName("idCompte");

                    b.Property<int?>("IdStatutTransport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idStatutTransport")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("IdVehiculeLivraison")
                        .HasColumnType("int")
                        .HasColumnName("idVehiculeLivraison");

                    b.Property<int?>("IdVehiculeReprise")
                        .HasColumnType("int")
                        .HasColumnName("idVehiculeReprise");

                    b.Property<decimal>("PrixTotal")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("prixTotal");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("reference");

                    b.Property<string>("TypeTransport")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("typeTransport");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdAdresseDebut" }, "idAdresseDebut");

                    b.HasIndex(new[] { "IdAdresseFin" }, "idAdresseFin");

                    b.HasIndex(new[] { "IdCompte" }, "idCompte")
                        .HasDatabaseName("idCompte1");

                    b.HasIndex(new[] { "IdStatutTransport" }, "idStatutTransport");

                    b.HasIndex(new[] { "IdVehiculeLivraison" }, "idVehiculeLivraison");

                    b.HasIndex(new[] { "IdVehiculeReprise" }, "idVehiculeReprise");

                    b.ToTable("transport", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Typeentreprises.Typeentreprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nom");

                    b.HasKey("Id");

                    b.ToTable("typeentreprise", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "EL / EIRL"
                        },
                        new
                        {
                            Id = 2,
                            Nom = "EURL"
                        },
                        new
                        {
                            Id = 3,
                            Nom = "SARL"
                        },
                        new
                        {
                            Id = 4,
                            Nom = "SA"
                        },
                        new
                        {
                            Id = 5,
                            Nom = "SAS / SASU"
                        },
                        new
                        {
                            Id = 6,
                            Nom = "SNC"
                        },
                        new
                        {
                            Id = 7,
                            Nom = "Scop"
                        },
                        new
                        {
                            Id = 8,
                            Nom = "SCA"
                        },
                        new
                        {
                            Id = 9,
                            Nom = "SCS"
                        });
                });

            modelBuilder.Entity("DAL.Modules.Typemoteurs.Typemoteur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nom");

                    b.HasKey("Id");

                    b.ToTable("typemoteur", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Typevehicules.Typevehicule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Coefficiant")
                        .HasColumnType("int")
                        .HasColumnName("coefficiant");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("nom")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("typevehicule", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Vehicules.Vehicule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdCompte")
                        .HasColumnType("int")
                        .HasColumnName("idCompte");

                    b.Property<int>("IdTypeMoteur")
                        .HasColumnType("int")
                        .HasColumnName("idTypeMoteur");

                    b.Property<int>("IdTypeVehicule")
                        .HasColumnType("int")
                        .HasColumnName("idTypeVehicule");

                    b.Property<string>("NomCarburant")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nomCarburant");

                    b.Property<string>("NomMarque")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nomMarque");

                    b.Property<string>("NomModel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nomModel");

                    b.Property<string>("NumeroVin")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("char(8)")
                        .HasColumnName("numeroVIN")
                        .IsFixedLength();

                    b.Property<string>("PlaqueImatriculation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("plaqueImatriculation");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdCompte" }, "idCompte")
                        .HasDatabaseName("idCompte2");

                    b.HasIndex(new[] { "IdTypeMoteur" }, "idTypeMoteur");

                    b.HasIndex(new[] { "IdTypeVehicule" }, "idTypeVehicule");

                    b.ToTable("vehicule", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<int?>("CompteId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CompteId");

                    b.ToTable("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "cc985522-8974-43de-8b60-5d4b57608af4",
                            Name = "Administrateur",
                            NormalizedName = "ADMINISTRATEUR"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "e8583726-ab97-4579-b405-9deb4ec6598c",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DAL.Modules.Adresses.Adresse", b =>
                {
                    b.HasOne("DAL.Modules.Comptes.Compte", "Compte")
                        .WithMany("Adresses")
                        .HasForeignKey("IdCompte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("adresse_ibfk_1");

                    b.Navigation("Compte");
                });

            modelBuilder.Entity("DAL.Modules.Comptes.Compte", b =>
                {
                    b.HasOne("DAL.Modules.Rolecomptes.Rolecompte", "IdRoleCompteNavigation")
                        .WithMany("Comptes")
                        .HasForeignKey("IdRoleCompte")
                        .IsRequired()
                        .HasConstraintName("compte_ibfk_1");

                    b.HasOne("DAL.Modules.Typeentreprises.Typeentreprise", "TypeEntreprise")
                        .WithMany("Comptes")
                        .HasForeignKey("IdTypeEntreprise")
                        .IsRequired()
                        .HasConstraintName("compte_ibfk_2");

                    b.Navigation("IdRoleCompteNavigation");

                    b.Navigation("TypeEntreprise");
                });

            modelBuilder.Entity("DAL.Modules.Servicesupplementairetransports.Servicesupplementairetransport", b =>
                {
                    b.HasOne("DAL.Modules.Transports.Transport", "IdTransportNavigation")
                        .WithMany("Servicesupplementairetransports")
                        .HasForeignKey("IdTransport")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("serviceSupplementaireTransport_ibfk_1");

                    b.Navigation("IdTransportNavigation");
                });

            modelBuilder.Entity("DAL.Modules.Transports.Transport", b =>
                {
                    b.HasOne("DAL.Modules.Adressetransports.Adressetransport", "IdAdresseDebutNavigation")
                        .WithMany("TransportIdAdresseDebutNavigations")
                        .HasForeignKey("IdAdresseDebut")
                        .IsRequired()
                        .HasConstraintName("transport_ibfk_5");

                    b.HasOne("DAL.Modules.Adressetransports.Adressetransport", "IdAdresseFinNavigation")
                        .WithMany("TransportIdAdresseFinNavigations")
                        .HasForeignKey("IdAdresseFin")
                        .IsRequired()
                        .HasConstraintName("transport_ibfk_6");

                    b.HasOne("DAL.Modules.Comptes.Compte", "IdCompteNavigation")
                        .WithMany("Transports")
                        .HasForeignKey("IdCompte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("transport_ibfk_1");

                    b.HasOne("DAL.Modules.Statuttransports.Statuttransport", "IdStatutTransportNavigation")
                        .WithMany("Transports")
                        .HasForeignKey("IdStatutTransport")
                        .HasConstraintName("transport_ibfk_4");

                    b.HasOne("DAL.Modules.Vehicules.Vehicule", "IdVehiculeLivraisonNavigation")
                        .WithMany("TransportIdVehiculeLivraisonNavigations")
                        .HasForeignKey("IdVehiculeLivraison")
                        .HasConstraintName("transport_ibfk_2");

                    b.HasOne("DAL.Modules.Vehicules.Vehicule", "IdVehiculeRepriseNavigation")
                        .WithMany("TransportIdVehiculeRepriseNavigations")
                        .HasForeignKey("IdVehiculeReprise")
                        .HasConstraintName("transport_ibfk_3");

                    b.Navigation("IdAdresseDebutNavigation");

                    b.Navigation("IdAdresseFinNavigation");

                    b.Navigation("IdCompteNavigation");

                    b.Navigation("IdStatutTransportNavigation");

                    b.Navigation("IdVehiculeLivraisonNavigation");

                    b.Navigation("IdVehiculeRepriseNavigation");
                });

            modelBuilder.Entity("DAL.Modules.Vehicules.Vehicule", b =>
                {
                    b.HasOne("DAL.Modules.Comptes.Compte", "IdCompteNavigation")
                        .WithMany("Vehicules")
                        .HasForeignKey("IdCompte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vehicule_ibfk_3");

                    b.HasOne("DAL.Modules.Typemoteurs.Typemoteur", "IdTypeMoteurNavigation")
                        .WithMany("Vehicules")
                        .HasForeignKey("IdTypeMoteur")
                        .IsRequired()
                        .HasConstraintName("vehicule_ibfk_2");

                    b.HasOne("DAL.Modules.Typevehicules.Typevehicule", "IdTypeVehiculeNavigation")
                        .WithMany("Vehicules")
                        .HasForeignKey("IdTypeVehicule")
                        .IsRequired()
                        .HasConstraintName("vehicule_ibfk_1");

                    b.Navigation("IdCompteNavigation");

                    b.Navigation("IdTypeMoteurNavigation");

                    b.Navigation("IdTypeVehiculeNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasOne("DAL.Modules.Comptes.Compte", null)
                        .WithMany("Roles")
                        .HasForeignKey("CompteId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DAL.Modules.Comptes.Compte", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DAL.Modules.Comptes.Compte", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Modules.Comptes.Compte", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DAL.Modules.Comptes.Compte", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Modules.Adressetransports.Adressetransport", b =>
                {
                    b.Navigation("TransportIdAdresseDebutNavigations");

                    b.Navigation("TransportIdAdresseFinNavigations");
                });

            modelBuilder.Entity("DAL.Modules.Comptes.Compte", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Roles");

                    b.Navigation("Transports");

                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("DAL.Modules.Rolecomptes.Rolecompte", b =>
                {
                    b.Navigation("Comptes");
                });

            modelBuilder.Entity("DAL.Modules.Statuttransports.Statuttransport", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("DAL.Modules.Transports.Transport", b =>
                {
                    b.Navigation("Servicesupplementairetransports");
                });

            modelBuilder.Entity("DAL.Modules.Typeentreprises.Typeentreprise", b =>
                {
                    b.Navigation("Comptes");
                });

            modelBuilder.Entity("DAL.Modules.Typemoteurs.Typemoteur", b =>
                {
                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("DAL.Modules.Typevehicules.Typevehicule", b =>
                {
                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("DAL.Modules.Vehicules.Vehicule", b =>
                {
                    b.Navigation("TransportIdVehiculeLivraisonNavigations");

                    b.Navigation("TransportIdVehiculeRepriseNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
